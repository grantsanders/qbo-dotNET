@page "/oauth2redirect"
@inject ICsvHandler csvHandler
@inject IApiHandler apiHandler
@inject ILogger<OAuth2Redirect> logger
@inject NavigationManager navigationManager

@using Intuit.Ipp.Core
@using Intuit.Ipp.Data
@using Intuit.Ipp.OAuth2PlatformClient
@using System.Diagnostics
@using System.Web
@using Microsoft.AspNetCore.Components;


<PageTitle>Invoicing</PageTitle>

<body class="invoicing">


    @if (fileContent == null)
    {
        <h4>Select a CSV:</h4>
        <MatFileUpload OnChange="@FilesReadyForContent" Label="Drop a single file here or Browse" Style="background-color:#292a2b; border-bottom-color: #202021; "></MatFileUpload>
    }
    else
    {
        <h4>File Processed</h4>
        <div class="buttons">
            <MatButton Disabled="@disableButton" OnClick="@post">Post to Quickbooks</MatButton> <MatButton OnClick="@nullify">Clear</MatButton>
        </div>
            <h4>Invoices Sorted for:</h4>
            foreach (Invoice invoice in csvHandler.finalInvoiceList)
            {
                <h4>@invoice.CustomerRef.name</h4>
            }
    }

</body>

@code {

    string? fileContent;
    bool? invoicesPosted;
    bool disableButton = true;

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                apiHandler.code = navigationManager.ToBaseRelativePath(navigationManager.Uri).Split('?')[1]
                    .Split('&')
                    .FirstOrDefault(s => s.StartsWith("code="))
                    ?.Split('=')[1];

                apiHandler.realmId = navigationManager.ToBaseRelativePath(navigationManager.Uri).Split('?')[1]
                    .Split('&')
                    .FirstOrDefault(s => s.StartsWith("realmId="))
                    ?.Split('=')[1];

                apiHandler.getServiceContext();

                logger.LogWarning("Service Context Retrieved");
            }
            catch (IndexOutOfRangeException ex) { logger.LogError(ex.Message + ex.Source); }
        }
    }


    public void nullify()
    {
        fileContent = null;
        csvHandler.finalInvoiceList.Clear();
        invoicesPosted = false;
    }

    async System.Threading.Tasks.Task post()
    {
        apiHandler.postInvoices(csvHandler.finalInvoiceList);
        logger.LogWarning("Done posting invoices");
        invoicesPosted = true;
    }

    async System.Threading.Tasks.Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }
            using (var stream = new MemoryStream())
            {
                var sw = Stopwatch.StartNew();
                await file.WriteToStreamAsync(stream);
                sw.Stop();
                if (stream.Length > 1024 * 1024)
                {
                    fileContent = "";
                    fileContent += $"Name:\t{file.Name}\r\n";
                    fileContent += $"Type:\t{file.Type}\r\n";
                    fileContent += $"LastModified:\t{file.LastModified}\r\n";
                    fileContent += $"Size:\t{file.Size}\r\n";
                    fileContent += $"Time:\t{sw.Elapsed}\r\n";
                    fileContent += $"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n";
                }
                else
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                        csvHandler.rawData = fileContent;
                        await csvHandler.formatData();
                        logger.LogWarning("Data Stored");
                    }
                }
            }
        }
        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
            disableButton = false;
        }
    }
}


