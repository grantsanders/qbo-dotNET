@page "/oauth2redirect"
@inject ICsvHandler csvHandler
@inject IApiHandler apiHandler

@using Intuit.Ipp.Core
@using Intuit.Ipp.Data
@using Intuit.Ipp.OAuth2PlatformClient
@using System.Diagnostics
@using System.Web
@using Microsoft.AspNetCore.Components;

@inject NavigationManager navigationManager


<PageTitle>Invoicing</PageTitle>

<body class="invoicing">

    <h4>Select a CSV:</h4>

    @if (fileContent == null)
    {
        <MatFileUpload OnChange="@FilesReadyForContent" Label="Drop a single file here or Browse" Style="background-color:#292a2b; border-bottom-color: #202021; "></MatFileUpload>
    }
    else
    {
        <div class="buttons">
            <MatButton OnClick="@post">Upload</MatButton> <MatButton OnClick="@nullify">Clear</MatButton>
        </div>
    }

</body>

@code {

    string? fileContent;

    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            apiHandler.code = navigationManager.ToBaseRelativePath(navigationManager.Uri).Split('?')[1]
                .Split('&')
                .FirstOrDefault(s => s.StartsWith("code="))
                ?.Split('=')[1];

            apiHandler.realmId = navigationManager.ToBaseRelativePath(navigationManager.Uri).Split('?')[1]
                .Split('&')
                .FirstOrDefault(s => s.StartsWith("realmId="))
                ?.Split('=')[1];

            apiHandler.getServiceContext();

            Console.WriteLine("Service Context Retrieved");
        }
    }


    public void nullify()
    {
        fileContent = null;
    }

    async System.Threading.Tasks.Task post()
    {
        apiHandler.postInvoices(csvHandler.finalInvoiceList);
        Console.WriteLine("Done posting invoices");
    }

    async System.Threading.Tasks.Task FilesReadyForContent(IMatFileUploadEntry[] files)
    {
        try
        {
            var file = files.FirstOrDefault();
            if (file == null)
            {
                return;
            }
            using (var stream = new MemoryStream())
            {
                var sw = Stopwatch.StartNew();
                await file.WriteToStreamAsync(stream);
                sw.Stop();
                if (stream.Length > 1024 * 1024)
                {
                    fileContent = "";
                    fileContent += $"Name:\t{file.Name}\r\n";
                    fileContent += $"Type:\t{file.Type}\r\n";
                    fileContent += $"LastModified:\t{file.LastModified}\r\n";
                    fileContent += $"Size:\t{file.Size}\r\n";
                    fileContent += $"Time:\t{sw.Elapsed}\r\n";
                    fileContent += $"Speed:\t{(stream.Length / sw.Elapsed.TotalSeconds):N0}  b/s\r\n";
                }
                else
                {
                    stream.Seek(0, SeekOrigin.Begin);
                    using (var reader = new StreamReader(stream))
                    {
                        fileContent = await reader.ReadToEndAsync();
                        csvHandler.rawData = fileContent;
                        Console.WriteLine("Data Stored");
                        await csvHandler.formatData();
                    }
                }
            }
        }
        catch (Exception e)
        {
            fileContent = $"Error:\r\n{e.Message}\r\n{e.StackTrace}";
        }
        finally
        {
            csvHandler.rawData = fileContent;
            await InvokeAsync(StateHasChanged);
        }
    }
}


